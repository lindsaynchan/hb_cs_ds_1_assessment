Part 1: Discussion Questions

Runtime

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

To determine the workload, you would need to think of the worst case scenario. In terms of the box of animal crackers, the worst case would be if there were an insanely large number of crackers, only one elephant cracker and that this cracker was the very last one in the box. This scenario would require a for loop to check all of the crackers, resulting in a O(n) runtime. 


2. Order the following runtimes in ascending order by efficiency as n approaches infinity:

O(1), O(log n), O(n), O(n log n), O(n2), O(2n)

Stacks and Queues

1. In the following cases, would a stack or queue be a more appropriate data structure?
a. The process of loading and unloading pallets onto a flatbed truck
Stack
b. Putting bottle caps on bottles of beer as they roll down an assembly line
Queue
c. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
Stack

2. Describe two more situations where a queue would be an appropriate data structure.

Purchasing tickets online, the first ones to login get tickets.
Line at any store.


3. Describe two more situations where a stack would be an appropriate data structure.

Vending machines, the lastly placed items are the ones that are taken first.
Stacks of clothes at stores.

Linked Lists

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

Apple + next square, Berry + next square and Cherry + next square are the nodes. Apple, Berry and Cherry are the data for each node. The head is the Apple node. The tail is not established in the diagram, but it should be pointed at the Cherry node.

2. What’s the difference between doubly- and singly-linked lists?

Doubly-linked lists contain a next node and a previous node attributes, whereas a singly-linked list only contains a next node attribute.

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?

It's faster to append to a linked list if the tail is known because this eliminates an extra step. If the tail isn't known, you would need to search for the last item in the linked list by looping through each node to find the one that's pointing to None. By knowing which node is the last one, you can just immediately go to that node, and append the new one.

Trees

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burrito (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, burrito

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

food, Mexican, enchiladas, tacos, burrito, Indian, saag, tikka masala, Italian, pizza, Sicilian, New York-style, Chicago-style

3. How is a binary search tree different from other trees?

A binary search tree is made up of nodes that have a left and a right child only. The nodes are arranged in a particular order (left child < parent < right child). 










